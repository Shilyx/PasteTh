/*
 *  @file  : PasteTh.cpp
 *  @author: Shilyx
 *  @date  : 2019-07-25 19:49:43.162
 *  @note  : Generated by SlxTemplates
 */

#include <Windows.h>
#include <CommCtrl.h>
#pragma warning(disable: 4786)
#include <tchar.h>
#include "resource.h"

HWND g_hwndDlg = NULL;
const UINT WM_ACTION = WM_USER + 112;

LRESULT CALLBACK LowLevelKeyboardProc(
    _In_ int    nCode,
    _In_ WPARAM wParam,
    _In_ LPARAM lParam
) {
    if (nCode == HC_ACTION && IsWindow(g_hwndDlg)) {
        if (wParam == WM_KEYDOWN) {
            LPKBDLLHOOKSTRUCT lpKbHs = (LPKBDLLHOOKSTRUCT)lParam;

            if (lpKbHs->vkCode == 'V' && GetKeyState(VK_CONTROL) < 0) {
                PostMessageW(g_hwndDlg, WM_ACTION, 0, 0);
            }
        }
    }

    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

class CPasteThDialog
{
#define PASTETH_OBJECT_PROP_NAME TEXT("__PasteThObject")

public:
    CPasteThDialog(HINSTANCE hInstance, LPCTSTR lpTemplate, HWND hParent)
        : m_hInstance(hInstance)
        , m_lpTemplate(lpTemplate)
        , m_hwndDlg(NULL)
        , m_hParent(hParent)
    {
        if (!IsDebuggerPresent()) {
            m_hHook = SetWindowsHookExW(WH_KEYBOARD_LL, LowLevelKeyboardProc, NULL, 0);
        }
    }

    ~CPasteThDialog() {
        if (m_hHook != NULL) {
            UnhookWindowsHookEx(m_hHook);
        }
    }

    HWND CreateModellessDialog()
    {
        return CreateDialogParam(m_hInstance, m_lpTemplate, m_hParent, PasteThDialogProc, (LPARAM)this);
    }

    operator HWND() const
    {
        return m_hwndDlg;
    }

    static int DemoMessageLoop(HWND hMainDlg)
    {
        MSG msg;

        while (TRUE)
        {
            int nRet = GetMessage(&msg, NULL, 0, 0);

            if (nRet < 0)
            {
                break;
            }

            if (nRet == 0)
            {
                return (int)msg.wParam;
            }

            if (!IsDialogMessage(hMainDlg, &msg))
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }

        return 0;
    }

    static CPasteThDialog *GetBindObject(HWND hwndDlg)
    {
        return (CPasteThDialog *)GetProp(hwndDlg, PASTETH_OBJECT_PROP_NAME);
    }

private:
    static INT_PTR CALLBACK PasteThDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        if (uMsg == WM_INITDIALOG)
        {
            SetProp(hwndDlg, PASTETH_OBJECT_PROP_NAME, (HANDLE)lParam);
        }

        CPasteThDialog *pPasteThDialog = GetBindObject(hwndDlg);

        if (pPasteThDialog != NULL)
        {
            return pPasteThDialog->PasteThDialogPrivateProc(hwndDlg, uMsg, wParam, lParam);
        }

        return FALSE;
    }

    INT_PTR CALLBACK PasteThDialogPrivateProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        switch (uMsg)
        {
        case WM_INITDIALOG:{
            HICON hIcon = LoadIcon(m_hInstance, MAKEINTRESOURCE(IDI_MAINFRAME));

            SendMessage(hwndDlg, WM_SETICON, ICON_BIG, (LPARAM)hIcon);
            SendMessage(hwndDlg, WM_SETICON, ICON_SMALL, (LPARAM)hIcon);

            m_hwndDlg = hwndDlg;
            g_hwndDlg = hwndDlg;
            OnInitDialog();

            break;}

        case WM_CLOSE:
            DestroyWindow(hwndDlg);
            break;

        case WM_DESTROY:
            OnDestroy();
            PostQuitMessage(0);
            RemoveProp(hwndDlg, PASTETH_OBJECT_PROP_NAME);
            break;

        case WM_COMMAND:
            if (LOWORD(wParam) == IDC_NEXT) {
                SelectAndCopyNext();
            } else if (LOWORD(wParam) == IDC_TEXT && HIWORD(wParam) == EN_CHANGE) {
                nLineId = 0;
            }
            break;

        case WM_ACTION:
            if (SendDlgItemMessageW(m_hwndDlg, IDC_PAUSE, BM_GETCHECK, 0, 0) != BST_CHECKED) {
                SelectAndCopyNext();
            }
            break;

        default:
            break;
        }

        return FALSE;
    }

    void SelectAndCopyNext() {
        WCHAR szText[4096];

        *(LPWORD)szText = RTL_NUMBER_OF(szText);
        if (0 != SendDlgItemMessageW(m_hwndDlg, IDC_TEXT, EM_GETLINE, nLineId, (LPARAM)szText)) {
            int nBegin = SendDlgItemMessageW(m_hwndDlg, IDC_TEXT, EM_LINEINDEX, nLineId, 0);
            int nEnd = SendDlgItemMessageW(m_hwndDlg, IDC_TEXT, EM_LINEINDEX, nLineId + 1, 0);

            if (nBegin >= 0) {
                SendDlgItemMessageW(m_hwndDlg, IDC_TEXT, EM_SETSEL, nBegin, nEnd);
                SendDlgItemMessageW(m_hwndDlg, IDC_TEXT, EM_SCROLLCARET, 0, 0);
            }
        }

        nLineId += 1;
    }

    void OnInitDialog()
    {

    }

    void OnDestroy()
    {

    }

private:
    HWND m_hwndDlg;
    HWND m_hParent;
    HINSTANCE m_hInstance;
    LPCTSTR m_lpTemplate;

    HHOOK m_hHook = NULL;
    int nLineId = 0;
};

int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nShowCmd)
{
    InitCommonControls();

    CPasteThDialog dlg(hInstance, MAKEINTRESOURCE(IDD_DIALOG), NULL);
    HWND hDlg = dlg.CreateModellessDialog();

    ShowWindow(hDlg, nShowCmd);
    UpdateWindow(hDlg);

    return CPasteThDialog::DemoMessageLoop(hDlg);
}